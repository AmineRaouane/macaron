# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the TyposquattingPresenceAnalyzer heuristic."""
# pylint: disable=redefined-outer-name


from pathlib import Path
from unittest.mock import MagicMock

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.typosquatting_presence import TyposquattingPresenceAnalyzer


@pytest.fixture()
def analyzer(tmp_path: Path) -> TyposquattingPresenceAnalyzer:
    """Pytest fixture to create a TyposquattingPresenceAnalyzer instance with a dummy popular packages file."""
    # create a dummy popular packages file
    pkg_file = tmp_path / "popular.txt"
    pkg_file.write_text("\n".join(["requests", "flask", "pytest"]))
    analyzer_instance = TyposquattingPresenceAnalyzer()
    analyzer_instance.popular_packages_path = str(pkg_file)
    return analyzer_instance


def test_analyze_exact_match_pass(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package name is an exact match to a popular package."""
    pypi_package_json.component_name = "requests"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {"package_name": "requests"}


def test_analyze_similar_name_fail(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when the package name is suspiciously similar to a popular package."""
    pypi_package_json.component_name = "reqursts"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["package_name"] == "reqursts"
    assert info["popular_package"] == "requests"
    # ratio should match or exceed threshold 0.95
    assert isinstance(info["similarity_ratio"], (int, float))
    assert info["similarity_ratio"] >= analyzer.distance_ratio_threshold


def test_analyze_unrelated_name_pass(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package name is not similar to any popular package."""
    pypi_package_json.component_name = "launchable"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {"package_name": "launchable"}


def test_analyze_nonexistent_file_skip(pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips if the popular packages file does not exist."""
    analyzer = TyposquattingPresenceAnalyzer()
    analyzer.popular_packages_path = "/path/does/not/exist.txt"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    error_msg = info.get("error")
    assert isinstance(error_msg, str)
    assert "Popular packages file not found" in error_msg


@pytest.mark.parametrize(
    ("s1", "s2", "expected"),
    [
        ("requests", "requests", 1.0),
        ("reqursts", "requests", 11 / 12),
        ("abcd", "wxyz", 0.0),
    ],
)
def test_jaro_distance(s1: str, s2: str, expected: float) -> None:
    """Test the Jaro distance calculation."""
    analyzer = TyposquattingPresenceAnalyzer()
    assert analyzer.jaro_distance(s1, s2) == expected
